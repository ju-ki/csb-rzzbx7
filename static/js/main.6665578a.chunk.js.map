{"version":3,"sources":["App.js","index.js"],"names":["values","map","value","id","item","colorValues","RadiobtnItems","onChange","checked","type","InputRadio","useState","checkedValue","setCheckedValue","className","e","target","App","rootElement","document","getElementById","createRoot","render"],"mappings":"mKA+EMA,GAlDoB,CAAC,EAAG,EAAG,EAAG,GACcC,KAAI,SAACC,GACrD,OAAOA,EAAQA,CAChB,IA+Cc,CACb,CAAEC,GAAI,EAAGC,KAAM,QACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,gBA8BXC,GA3BcL,EAAOC,KAAI,SAACC,GAC9B,OACE,wBAAQA,MAAOA,EAAME,KAArB,SACGF,EAAME,MADuBF,EAAMC,GAIzC,IAqBmB,CAClB,CAAEA,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,SACf,CAAED,GAAI,EAAGC,KAAM,UAGXE,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OACpBH,EAAYJ,KAAI,SAACC,GACf,OACE,kCACE,uBACEO,KAAK,QACLP,MAAOA,EAAME,KACbG,SAAUA,EACVC,QAASA,IAAYN,EAAME,OAE5BF,EAAME,OAPGF,EAAMC,GAUrB,GAbmB,EAehBO,EAAa,WACjB,MAAwCC,mBAASN,EAAY,GAAZ,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,gDACiB,4BAAIF,OAErB,cAAC,EAAD,CAAeL,SANE,SAACQ,GAAD,OAAOF,EAAgBE,EAAEC,OAAOd,MAAhC,EAMsBM,QAASI,MAGrD,EAEc,SAASK,IAQtB,OAAO,cAAC,EAAD,GACR,CCtJD,IAAMC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACL,EAAD,M","file":"static/js/main.6665578a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nconst LogoutButton = (props) => {\n  return <button onClick={props.toggleIsLoggedIn}>Logout</button>;\n};\n\nconst LoginButton = (props) => {\n  return <button onClick={props.toggleIsLoggedIn}>Login</button>;\n};\n\nconst LoginControl = () => {\n  const [isLoggedIn, setIsLoggedInState] = useState(false);\n\n  const toggleIsLoggedIn = () => {\n    setIsLoggedInState(!isLoggedIn);\n  };\n\n  if (isLoggedIn) {\n    return <LogoutButton toggleIsLoggedIn={toggleIsLoggedIn} />;\n  } else {\n    return <LoginButton toggleIsLoggedIn={toggleIsLoggedIn} />;\n  }\n};\nconst Hello = () => {\n  const isReact = false;\n  return <p>{isReact ? \"Hello React\" : \"Hello\"}</p>;\n};\n\nconst sampleArrayForMap = [2, 4, 6, 8];\nconst sampleArrayForMapResult = sampleArrayForMap.map((value) => {\n  return value * value;\n});\n\n// console.log(sampleArrayForMapResult);\n\nconst numbers = [2, 4, 6, 8];\n\nconst ListItems = () => {\n  const items = numbers.map((item) => <li key={item.toString()}>{item}</li>);\n  return <ul>{items}</ul>;\n};\n\nconst handleClick = () => {\n  console.log(\"clicked\");\n};\n\nconst SampleButton = () => {\n  return <input type=\"button\" value=\"button\" onClick={handleClick} />;\n};\n\nconst handleChange = (e) => {\n  console.log(e.target.value);\n};\n\nconst SampleInputText = () => {\n  return <input type=\"text\" defaultValue=\"\" onChange={handleChange} />;\n};\n\nconst InputText = () => {\n  const [InputTextValue, setInputTextValue] = useState(\"\");\n  const [text, setText] = useState(\"javaScript\");\n\n  const handleChange = (e) => setInputTextValue(e.target.value);\n\n  const handleClick = () => {\n    setText(InputTextValue);\n    setInputTextValue(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>I love {text}!!</h1>\n      <input type=\"text\" value={InputTextValue} onChange={handleChange} />\n      <input type=\"button\" value={\"Input\"} onClick={handleClick} />\n    </div>\n  );\n};\n\nconst values = [\n  { id: 1, item: \"HTML\" },\n  { id: 2, item: \"CSS\" },\n  { id: 3, item: \"JavaScript\" }\n];\n\nconst SelectItems = values.map((value) => {\n  return (\n    <option value={value.item} key={value.id}>\n      {value.item}\n    </option>\n  );\n});\n\nconst InputSelectBox = () => {\n  const [selectedValue, setSelectedValue] = useState(values[0][\"item\"]);\n  const handleChange = (e) => {\n    setSelectedValue(e.target.value);\n  };\n  return (\n    <div className=\"App\">\n      <p>\n        現在選択されている値\n        <b>{selectedValue}</b>\n      </p>\n\n      <select value={selectedValue} onChange={handleChange}>\n        {SelectItems}\n      </select>\n    </div>\n  );\n};\n\nconst colorValues = [\n  { id: 1, item: \"red\" },\n  { id: 2, item: \"green\" },\n  { id: 3, item: \"blue\" }\n];\n\nconst RadiobtnItems = ({ onChange, checked }) =>\n  colorValues.map((value) => {\n    return (\n      <label key={value.id}>\n        <input\n          type=\"radio\"\n          value={value.item}\n          onChange={onChange}\n          checked={checked === value.item}\n        />\n        {value.item}\n      </label>\n    );\n  });\n\nconst InputRadio = () => {\n  const [checkedValue, setCheckedValue] = useState(colorValues[0][\"item\"]);\n  const handleChange = (e) => setCheckedValue(e.target.value);\n  return (\n    <div className=\"App\">\n      <p>\n        Current Value: <b>{checkedValue}</b>\n      </p>\n      <RadiobtnItems onChange={handleChange} checked={checkedValue} />\n    </div>\n  );\n};\n\nexport default function App() {\n  // return <LoginControl />;\n  // return <Hello />;\n  // return <ListItems />;\n  // return <SampleButton />;\n  // return <SampleInputText />;\n  // return <InputText />;\n  // return <InputSelectBox />;\n  return <InputRadio />;\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}